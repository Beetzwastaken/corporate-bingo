{
  "version": 3,
  "sources": ["../bundle-P5vEhy/checked-fetch.js", "../../../worker.js", "file:///C:/Users/Ryan/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/Ryan/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-P5vEhy/middleware-insertion-facade.js", "file:///C:/Users/Ryan/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-P5vEhy/middleware-loader.entry.ts"],
  "sourceRoot": "F:\\CC\\Projects\\engineer-memes\\.wrangler\\tmp\\dev-qUGdDw",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Buzzword Bingo - Cloudflare Workers + Durable Objects Backend\n// Handles real multiplayer rooms with unique boards per player\n\n// CORS helper with security improvements\nfunction corsHeaders(origin) {\n  const allowedOrigins = [\n    'https://engineer-memes-ai.netlify.app',\n    'http://localhost:8080',\n    'http://localhost:3000',\n    'http://localhost:5174',\n    'http://localhost:5175'\n  ];\n  \n  const validOrigin = allowedOrigins.includes(origin) ? origin : null;\n  \n  return {\n    'Access-Control-Allow-Origin': validOrigin || 'null',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Max-Age': '86400',\n  };\n}\n\n// Main Worker - Routes API requests to Durable Objects\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const origin = request.headers.get('Origin');\n\n    // Handle preflight CORS\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { \n        status: 200, \n        headers: corsHeaders(origin) \n      });\n    }\n\n    try {\n      // Create Room - POST /api/room/create\n      if (url.pathname === '/api/room/create' && request.method === 'POST') {\n        const body = await request.json();\n        \n        // Input validation\n        const { roomName, playerName } = validateRoomInput(body);\n        if (!roomName || !playerName) {\n          return new Response(JSON.stringify({ error: 'Invalid room name or player name' }), {\n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n          });\n        }\n        \n        // Generate secure unique room code\n        const roomCode = await generateRoomCode(env);\n        \n        // Create Durable Object for this room\n        const roomId = env.ROOMS.idFromName(roomCode);\n        const roomObj = env.ROOMS.get(roomId);\n        \n        // Initialize room with host player\n        const response = await roomObj.fetch(new Request('https://dummy/create', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ roomName, playerName, roomCode })\n        }));\n        \n        const result = await response.json();\n        \n        return new Response(JSON.stringify(result), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // Join Room - POST /api/room/join\n      if (url.pathname === '/api/room/join' && request.method === 'POST') {\n        const body = await request.json();\n        \n        // Input validation\n        const { roomCode, playerName } = validateJoinInput(body);\n        if (!roomCode || !playerName) {\n          return new Response(JSON.stringify({ error: 'Invalid room code or player name' }), {\n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n          });\n        }\n        \n        // Get existing room Durable Object\n        const roomId = env.ROOMS.idFromName(roomCode);\n        const roomObj = env.ROOMS.get(roomId);\n        \n        const response = await roomObj.fetch(new Request('https://dummy/join', {\n          method: 'POST', \n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ playerName })\n        }));\n        \n        if (response.status === 404) {\n          return new Response(JSON.stringify({ error: 'Room not found' }), {\n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n          });\n        }\n        \n        const result = await response.json();\n        \n        return new Response(JSON.stringify(result), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // WebSocket connection - GET /api/room/:code/ws\n      if (url.pathname.startsWith('/api/room/') && url.pathname.endsWith('/ws')) {\n        const roomCode = url.pathname.split('/')[3];\n        \n        if (request.headers.get('Upgrade') !== 'websocket') {\n          return new Response('Expected WebSocket', { status: 400 });\n        }\n        \n        // Get room Durable Object and upgrade to WebSocket\n        const roomId = env.ROOMS.idFromName(roomCode);\n        const roomObj = env.ROOMS.get(roomId);\n        \n        return roomObj.fetch(request);\n      }\n\n      // Analytics Dashboard Endpoints\n      \n      // Dashboard Performance Metrics - GET /api/dashboard/performance\n      if (url.pathname === '/api/dashboard/performance' && request.method === 'GET') {\n        const analytics = await getPerformanceMetrics(env);\n        return new Response(JSON.stringify(analytics), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // Dashboard Player Analytics - GET /api/dashboard/players\n      if (url.pathname === '/api/dashboard/players' && request.method === 'GET') {\n        const analytics = await getPlayerAnalytics(env);\n        return new Response(JSON.stringify(analytics), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // Dashboard Buzzword Effectiveness - GET /api/dashboard/buzzwords\n      if (url.pathname === '/api/dashboard/buzzwords' && request.method === 'GET') {\n        const analytics = await getBuzzwordEffectiveness(env);\n        return new Response(JSON.stringify(analytics), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // Dashboard System Health - GET /api/dashboard/system\n      if (url.pathname === '/api/dashboard/system' && request.method === 'GET') {\n        const health = await getSystemHealth(env);\n        return new Response(JSON.stringify(health), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      // Dashboard WebSocket - GET /api/dashboard/ws\n      if (url.pathname === '/api/dashboard/ws') {\n        if (request.headers.get('Upgrade') !== 'websocket') {\n          return new Response('Expected WebSocket', { status: 400 });\n        }\n        \n        return handleDashboardWebSocket(request, env);\n      }\n\n      // Test endpoint\n      if (url.pathname === '/api/test') {\n        return new Response(JSON.stringify({ message: 'API is working', buzzwordCount: BUZZWORDS.length }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n        });\n      }\n\n      return new Response('Not Found', { \n        status: 404, \n        headers: corsHeaders(origin) \n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(JSON.stringify({ error: 'Internal server error' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders(origin) }\n      });\n    }\n  }\n};\n\n// Input validation functions\nfunction validateRoomInput(body) {\n  if (!body || typeof body !== 'object') return {};\n  \n  const roomName = typeof body.roomName === 'string' ? body.roomName.trim().slice(0, 50) : '';\n  const playerName = typeof body.playerName === 'string' ? body.playerName.trim().slice(0, 30) : '';\n  \n  // Sanitize inputs - remove HTML tags and special characters\n  const sanitizedRoomName = roomName.replace(/[<>'\"&]/g, '');\n  const sanitizedPlayerName = playerName.replace(/[<>'\"&]/g, '');\n  \n  return {\n    roomName: sanitizedRoomName.length >= 1 ? sanitizedRoomName : null,\n    playerName: sanitizedPlayerName.length >= 1 ? sanitizedPlayerName : null\n  };\n}\n\nfunction validateJoinInput(body) {\n  if (!body || typeof body !== 'object') return {};\n  \n  const roomCode = typeof body.roomCode === 'string' ? body.roomCode.trim().toUpperCase() : '';\n  const playerName = typeof body.playerName === 'string' ? body.playerName.trim().slice(0, 30) : '';\n  \n  // Validate room code format (6 alphanumeric characters)\n  const sanitizedRoomCode = /^[A-Z0-9]{6}$/.test(roomCode) ? roomCode : null;\n  const sanitizedPlayerName = playerName.replace(/[<>'\"&]/g, '');\n  \n  return {\n    roomCode: sanitizedRoomCode,\n    playerName: sanitizedPlayerName.length >= 1 ? sanitizedPlayerName : null\n  };\n}\n\n// Generate secure 6-character room code (collision probability is extremely low with crypto random)\nasync function generateRoomCode(env) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  \n  // Use crypto.getRandomValues for secure randomization\n  const array = new Uint8Array(6);\n  crypto.getRandomValues(array);\n  \n  const roomCode = Array.from(array, byte => \n    chars[byte % chars.length]\n  ).join('');\n  \n  return roomCode;\n}\n\n// Fisher-Yates shuffle algorithm (proper randomization)\nfunction fisherYatesShuffle(array) {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Corporate buzzwords library (same as frontend)\nconst BUZZWORDS = [\n    // Classic Corporate Speak (The Absolute Worst)\n    'Synergy', 'Leverage', 'Deep Dive', 'Circle Back', 'Touch Base',\n    'Low-hanging Fruit', 'Move the Needle', 'Paradigm Shift', 'Think Outside the Box',\n    'Best Practice', 'Core Competency', 'Value-add', 'Game Changer', 'Win-win',\n    'Right-size', 'Optimize', 'Streamline', 'Ideate', 'Impactful',\n    \n    // Meeting & Communication Gems  \n    'Take it Offline', 'Ping Me', 'Loop In', 'Bandwidth', 'On My Radar',\n    'Align on This', 'Sync Up', 'Park That', 'Table This', 'Double Click',\n    'Drill Down', 'Level Set', 'Socialize', 'Evangelize', 'Champion',\n    'Cascade Down', 'Run it Up', 'Put a Pin In', 'Peel the Onion', 'Boil the Ocean',\n    'Circle Back Later', 'Take That Offline', 'Sync Up Tomorrow', 'Revisit This',\n    'Follow Up Separately', 'Schedule a Follow-up', 'Set Up Time', 'Grab Time',\n    'Quick Sync', 'Brain Dump', 'Download You', 'Get You Up to Speed',\n    'Bring Everyone Along', 'Get Buy-in', 'Surface This Up', 'Bubble Up',\n    \n    // Meeting Theater & Corporate Comedy\n    'Let\\'s Take This Offline', 'We Need to Socialize This', 'Run it by Legal',\n    'Get Finance Involved', 'Check with Compliance', 'Validate with Leadership',\n    'Vet This Through', 'Pressure Test the Idea', 'Stress Test Assumptions',\n    'Sanity Check Numbers', 'Gut Check the Plan', 'Reality Check Timeline',\n    'Can You Speak to That?', 'What\\'s Your Take?', 'How Do You See This?',\n    'Where Do You Land?', 'What\\'s Your Comfort Level?', 'Any Concerns?',\n    'Red Flags?', 'Deal Breakers?', 'Showstoppers?', 'Blockers?',\n    'Circle Back on Monday', 'Let\\'s Unpack This', 'Thoughts?', 'Does That Resonate?',\n    \n    // Virtual Meeting Comedy Gold\n    'You\\'re Muted', 'Can You Hear Me?', 'Are You There?', 'Hello? Hello?',\n    'Can Everyone See My Screen?', 'Are You Presenting?', 'Who\\'s Presenting?',\n    'Let Me Share My Screen', 'Can You See This?', 'Is This Visible?',\n    'Sorry, I Was Muted', 'You Cut Out There', 'Your Audio is Breaking Up',\n    'Can You Repeat That?', 'Sorry, Can You Say That Again?', 'I Didn\\'t Catch That',\n    'Let Me Stop Sharing', 'I Think You\\'re Still Muted', 'We Can\\'t Hear You',\n    'Your Video is Frozen', 'You\\'re Breaking Up', 'Bad Connection',\n    'Can Someone Else Drive?', 'Who Has the Deck?', 'Next Slide Please',\n    'Sorry, I\\'m Having Technical Issues', 'Let Me Try Again', 'Can You Try Now?',\n    'I\\'ll Send the Link in Chat', 'Check the Chat', 'Posted in Chat',\n    'Sorry, I\\'m Late', 'Traffic Was Terrible', 'Had Back-to-Back Meetings',\n    'Can We Get Started?', 'Let\\'s Give It Two More Minutes', 'Waiting for Everyone',\n    'Someone Else Just Joined', 'I Think We\\'re All Here', 'Let\\'s Begin',\n    'Can You Make Me Presenter?', 'I Need Presenter Rights', 'Who\\'s the Organizer?',\n    'Let Me Make You Presenter', 'I\\'ll Give You Control', 'Taking Control Back',\n    'Echo on the Line', 'Hearing an Echo', 'Someone\\'s Not Muted',\n    'Feedback Loop', 'Can Everyone Mute?', 'Please Mute When Not Speaking',\n    'Dog is Barking', 'Kids in Background', 'Sorry About the Noise',\n    'Construction Outside', 'Leaf Blower', 'Lawnmower Outside',\n    'I Have a Hard Stop', 'Need to Drop in 10 Minutes', 'Another Meeting Starting',\n    'Double Booked', 'Conflict with Another Meeting', 'Need to Jump to Another Call',\n    'Can We Record This?', 'Is This Being Recorded?', 'I\\'ll Start Recording',\n    'Meeting Notes', 'Action Items', 'Who\\'s Taking Notes?',\n    'I\\'ll Send a Recap', 'Follow-up Email', 'Meeting Summary',\n    'Can You Put That in Chat?', 'Link in the Chat', 'I Shared in Chat',\n    'Private Chat', 'Sidebar Conversation', 'Offline Discussion',\n    'Breakout Rooms', 'Let\\'s Split into Groups', 'Back to Main Room',\n    \n    // Corporate Speak Poetry & Fluff\n    'At the End of the Day', 'When All is Said and Done', 'Bottom Line',\n    'Net-Net', 'Long Story Short', 'To Be Completely Transparent',\n    'If I\\'m Being Honest', 'To Level Set', 'For Context', 'Background Info',\n    'Quick Backstory', 'History Lesson', 'Let Me Paint a Picture',\n    'Here\\'s the Situation', 'Here\\'s Where We Are', 'Current State',\n    'Moving Forward', 'Going Forward', 'Path Forward', 'Next Steps',\n    \n    // Absurd Corporate Priorities  \n    'Client-centric Solutions', 'Customer Success Journey', 'Stakeholder Alignment',\n    'Cross-functional Collaboration', 'Omnichannel Experience', 'End-to-end Solutions',\n    'Holistic Approach', 'Strategic Roadmap', 'Digital-first Mindset', 'Data-driven Decisions',\n    'Growth Mindset', 'Innovation Pipeline', 'Transformation Journey', 'Change Management',\n    'Process Optimization', 'Operational Excellence', 'Best-in-class', 'World-class',\n    'Industry-leading', 'Market-leading', 'Award-winning', 'Cutting-edge',\n    \n    // Hilarious Consultant Word Salad\n    'Value Creation', 'Competitive Advantage', 'Thought Leadership', 'Subject Matter Expert',\n    'Industry Best Practices', 'Benchmarking Studies', 'Gap Analysis', 'SWOT Analysis',\n    'Root Cause Analysis', 'Impact Assessment', 'Business Case Development', 'ROI Analysis',\n    'Cost-benefit Analysis', 'Risk Mitigation', 'Strategic Planning', 'Implementation Roadmap',\n    'Phase Gate Reviews', 'Milestone Tracking', 'Performance Metrics', 'Success Criteria',\n    'Key Performance Indicators', 'Return on Investment', 'Total Cost of Ownership',\n    \n    // Meeting Types & Corporate Events\n    'All Hands Meeting', 'Town Hall', 'Skip Level', 'One-on-One', 'Check-in',\n    'Stand-up', 'Scrum', 'Sprint Planning', 'Retrospective', 'Post-mortem',\n    'Brainstorming Session', 'Ideation Workshop', 'Design Thinking', 'Innovation Lab',\n    'Hackathon', 'Deep Dive Session', 'Working Session', 'Strategic Offsite',\n    'Leadership Retreat', 'Team Building', 'Culture Session', 'Values Workshop',\n    'Kick-off Meeting', 'Status Update', 'Checkpoint Review', 'Quarterly Business Review',\n    \n    // Startup & Business Development Nonsense\n    'Product-Market Fit', 'Go-to-Market Strategy', 'Minimum Viable Product', 'User Feedback',\n    'Iteration Cycle', 'Pivot Strategy', 'Scale Operations', 'Market Penetration',\n    'Customer Acquisition', 'Revenue Streams', 'Business Model', 'Value Proposition',\n    'Competitive Landscape', 'Market Opportunity', 'Total Addressable Market', 'Monetization Strategy',\n    'Customer Lifecycle', 'User Experience', 'Customer Experience', 'Brand Experience',\n    \n    // People & Culture Comedy\n    'Culture Fit', 'Team Player', 'Self-starter', 'Go-getter', 'Problem Solver',\n    'Strategic Thinker', 'Detail-oriented', 'Results-driven', 'Customer-focused',\n    'Collaborative Leader', 'Change Agent', 'Innovation Champion', 'Brand Ambassador',\n    'Cross-functional Partner', 'Stakeholder Manager', 'Relationship Builder',\n    'Culture Carrier', 'People Person', 'Servant Leader', 'Thought Partner',\n    'Executive Presence', 'Leadership Potential', 'High Performer', 'Top Talent',\n    \n    // Modern Business Buzzwords  \n    'Digital Transformation', 'Cloud-first', 'AI-powered', 'Machine Learning',\n    'Data Analytics', 'Business Intelligence', 'Predictive Analytics', 'Automation',\n    'Scalable Solutions', 'Agile Methodology', 'DevOps', 'Continuous Improvement',\n    'Innovation Culture', 'Disruptive Technology', 'Emerging Technologies', 'Future-ready',\n    'Next-generation', 'State-of-the-art', 'Revolutionary', 'Groundbreaking',\n    \n    // Sales & Marketing Theater\n    'Customer Journey', 'Buyer Persona', 'Lead Generation', 'Sales Funnel',\n    'Conversion Rate', 'Customer Acquisition Cost', 'Lifetime Value', 'Retention Strategy',\n    'Churn Analysis', 'Upselling', 'Cross-selling', 'Market Segmentation',\n    'Target Audience', 'Brand Positioning', 'Content Marketing', 'Inbound Strategy',\n    'Outbound Campaigns', 'Multi-touch Attribution', 'Lead Nurturing', 'Sales Enablement',\n    \n    // Project Management Comedy\n    'Scope Creep', 'Requirements Change', 'Budget Overrun', 'Schedule Slip',\n    'Resource Constraint', 'Dependencies', 'Critical Path', 'Milestone',\n    'Deliverable', 'Work Package', 'Action Item', 'Follow-up Item',\n    'Risk Register', 'Issue Log', 'Change Request', 'Status Report',\n    'Project Charter', 'Statement of Work', 'Work Breakdown Structure', 'Gantt Chart',\n    \n    // Executive & Leadership Speak\n    'Strategic Vision', 'Mission Critical', 'Core Values', 'Company Culture',\n    'Organizational Excellence', 'Leadership Development', 'Succession Planning', 'Talent Management',\n    'Performance Management', 'Engagement Survey', 'Employee Experience', 'Workplace Culture',\n    'Diversity & Inclusion', 'Corporate Social Responsibility', 'Sustainability Initiative', 'ESG Compliance',\n    'Governance Framework', 'Risk Management', 'Compliance Program', 'Audit Trail',\n    \n    // Finance & Operations Fluff\n    'Financial Planning', 'Budget Cycle', 'Cost Center', 'Profit Center',\n    'Revenue Recognition', 'Cash Flow', 'Working Capital', 'EBITDA',\n    'Gross Margin', 'Operating Margin', 'Capital Expenditure', 'Operating Expenditure',\n    'Accounts Receivable', 'Accounts Payable', 'Invoice Processing', 'Purchase Order',\n    'Vendor Management', 'Supplier Relations', 'Procurement Process', 'Supply Chain Management',\n    \n    // Light Engineering Humor (Relatable but Not Technical)\n    'Technical Debt', 'Legacy System', 'System Upgrade', 'Maintenance Window',\n    'Code Review', 'Quality Control', 'Testing Phase', 'User Acceptance Testing',\n    'Hot Fix', 'Patch Release', 'Version Control', 'Change Management',\n    'Documentation', 'Knowledge Transfer', 'Training Program', 'Best Practices Guide'\n];\n\n// Durable Object - BingoRoom handles individual room state and real-time gameplay\nexport class BingoRoom {\n  constructor(state, env) {\n    this.state = state;\n    this.env = env;\n    this.sessions = new Map(); // WebSocket connections\n    this.players = new Map();  // Player data with unique boards\n    this.playerRateLimits = new Map(); // Rate limiting per player\n    this.gameState = {\n      roomCode: '',\n      roomName: '',\n      hostId: '',\n      roundNumber: 1,\n      isActive: true,\n      created: Date.now(),\n      lastActivity: Date.now(),\n      pendingVerifications: new Map()\n    };\n    \n    // Constants for rate limiting and verification management\n    this.MAX_MESSAGES_PER_MINUTE = 30;\n    this.MAX_PENDING_VERIFICATIONS_PER_PLAYER = 3;\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n\n    // Handle WebSocket upgrade\n    if (request.headers.get('Upgrade') === 'websocket') {\n      return this.handleWebSocket(request);\n    }\n\n    // Handle room creation\n    if (url.pathname === '/create' && request.method === 'POST') {\n      const { roomName, playerName, roomCode } = await request.json();\n      \n      this.gameState.roomCode = roomCode;\n      this.gameState.roomName = roomName;\n      this.gameState.hostId = generatePlayerId();\n      \n      // Create host player with unique board\n      const hostPlayer = {\n        id: this.gameState.hostId,\n        name: playerName,\n        isHost: true,\n        board: this.generateUniqueBoard(),\n        markedSquares: new Array(25).fill(false),\n        currentScore: 0,\n        totalScore: 0,\n        joinedAt: Date.now(),\n        bingoAchievedThisRound: false\n      };\n      \n      this.players.set(this.gameState.hostId, hostPlayer);\n      \n      return new Response(JSON.stringify({\n        success: true,\n        roomCode,\n        playerId: this.gameState.hostId,\n        board: hostPlayer.board,\n        isHost: true\n      }));\n    }\n\n    // Handle room probe for collision detection (minimal response)\n    if (url.pathname === '/probe' && request.method === 'GET') {\n      // Return minimal response to prevent information disclosure\n      return new Response(null, { \n        status: this.gameState.isActive ? 200 : 404\n      });\n    }\n\n    // Handle player joining\n    if (url.pathname === '/join' && request.method === 'POST') {\n      const { playerName } = await request.json();\n      \n      if (!this.gameState.isActive) {\n        return new Response(JSON.stringify({ error: 'Room is not active' }), { status: 404 });\n      }\n      \n      // Check room capacity (max 10 players)\n      if (this.players.size >= 10) {\n        return new Response(JSON.stringify({ error: 'Room is full' }), { status: 400 });\n      }\n      \n      const playerId = generatePlayerId();\n      const newPlayer = {\n        id: playerId,\n        name: playerName,\n        isHost: false,\n        board: this.generateUniqueBoard(), // Each player gets unique board!\n        markedSquares: new Array(25).fill(false),\n        currentScore: 0,\n        totalScore: 0,\n        joinedAt: Date.now(),\n        bingoAchievedThisRound: false\n      };\n      \n      this.players.set(playerId, newPlayer);\n      \n      // Broadcast player join to all others\n      this.broadcast({\n        type: 'PLAYER_JOINED',\n        player: { id: playerId, name: playerName },\n        playerCount: this.players.size\n      }, playerId); // Exclude the joining player\n      \n      return new Response(JSON.stringify({\n        success: true,\n        playerId,\n        board: newPlayer.board, // Only their unique board\n        roomName: this.gameState.roomName,\n        playerCount: this.players.size,\n        roundNumber: this.gameState.roundNumber\n      }));\n    }\n\n    return new Response('Not found', { status: 404 });\n  }\n\n  // Generate unique 5x5 bingo board for each player\n  generateUniqueBoard() {\n    const shuffled = fisherYatesShuffle(BUZZWORDS);\n    const selected = shuffled.slice(0, 24); // 24 terms + 1 free space\n    \n    // Insert FREE SPACE in center (position 12)\n    const board = [];\n    for (let i = 0; i < 25; i++) {\n      if (i === 12) {\n        board.push('FREE SPACE');\n      } else {\n        const termIndex = i < 12 ? i : i - 1;\n        board.push(selected[termIndex]);\n      }\n    }\n    \n    return board;\n  }\n\n  // Handle WebSocket connections for real-time gameplay\n  async handleWebSocket(request) {\n    const url = new URL(request.url);\n    const playerId = url.searchParams.get('playerId');\n    \n    if (!playerId || !this.players.has(playerId)) {\n      return new Response('Invalid player ID', { status: 400 });\n    }\n    \n    const pair = new WebSocketPair();\n    const [client, server] = Object.values(pair);\n    \n    server.accept();\n    \n    // Store connection\n    this.sessions.set(playerId, {\n      socket: server,\n      player: this.players.get(playerId)\n    });\n    \n    // Handle incoming messages with comprehensive error handling\n    server.addEventListener('message', async (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        await this.handleMessage(playerId, data);\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        \n        // Send error response to client if possible\n        try {\n          server.send(JSON.stringify({\n            type: 'ERROR',\n            message: 'Invalid message format',\n            timestamp: Date.now()\n          }));\n        } catch (sendError) {\n          console.error('Failed to send error response:', sendError);\n          // Force close connection if we can't communicate\n          server.close(1011, 'Invalid message format');\n        }\n      }\n    });\n    \n    // Clean up on disconnect with proper memory management\n    server.addEventListener('close', () => {\n      this.sessions.delete(playerId);\n      \n      // Clean up player's pending verifications and rate limiting data\n      this.cleanupPlayerVerifications(playerId);\n      this.playerRateLimits.delete(playerId);\n      \n      // If this was the last connection for a player, remove them\n      const player = this.players.get(playerId);\n      if (player) {\n        this.players.delete(playerId);\n        console.log(`Player ${player.name} disconnected and removed from room`);\n        \n        // If room is empty, mark for cleanup\n        if (this.players.size === 0) {\n          this.gameState.isActive = false;\n          console.log('Room marked inactive - all players left');\n        }\n        \n        this.broadcast({\n          type: 'PLAYER_LEFT',\n          playerId,\n          playerName: player.name,\n          playerCount: this.players.size\n        });\n      }\n    });\n    \n    // Send initial room state to new connection\n    server.send(JSON.stringify({\n      type: 'ROOM_STATE',\n      players: Array.from(this.players.values()).map(p => ({\n        id: p.id,\n        name: p.name,\n        isHost: p.isHost,\n        currentScore: p.currentScore,\n        totalScore: p.totalScore\n      })),\n      roundNumber: this.gameState.roundNumber\n    }));\n    \n    return new Response(null, { status: 101, webSocket: client });\n  }\n\n  // Handle real-time messages from players with input validation and rate limiting\n  async handleMessage(playerId, data) {\n    const player = this.players.get(playerId);\n    if (!player) {\n      console.warn('Message from unknown player:', playerId);\n      return;\n    }\n    \n    // Rate limiting check\n    if (!this.checkRateLimit(playerId)) {\n      console.warn('Rate limit exceeded for player:', playerId);\n      const session = this.sessions.get(playerId);\n      if (session) {\n        try {\n          session.socket.send(JSON.stringify({\n            type: 'ERROR',\n            message: 'Rate limit exceeded. Please slow down.',\n            timestamp: Date.now()\n          }));\n        } catch (error) {\n          console.error('Failed to send rate limit warning:', error);\n        }\n      }\n      return;\n    }\n    \n    // Validate message structure\n    if (!data || typeof data !== 'object' || typeof data.type !== 'string') {\n      console.warn('Invalid message format from player:', playerId, data);\n      return;\n    }\n    \n    this.gameState.lastActivity = Date.now();\n    \n    switch (data.type) {\n      case 'CLAIM_BUZZWORD':\n        // Validate buzzword claim data\n        if (typeof data.buzzword !== 'string' || typeof data.squareIndex !== 'number' || \n            data.squareIndex < 0 || data.squareIndex > 24) {\n          console.warn('Invalid CLAIM_BUZZWORD data:', data);\n          return;\n        }\n        await this.handleBuzzwordClaim(playerId, data.buzzword, data.squareIndex);\n        break;\n        \n      case 'VERIFY_VOTE':\n        // Validate verification vote data\n        if (typeof data.verificationId !== 'string' || \n            !['approve', 'reject'].includes(data.vote) ||\n            typeof data.speaker !== 'string') {\n          console.warn('Invalid VERIFY_VOTE data:', data);\n          return;\n        }\n        await this.handleVerificationVote(playerId, data.verificationId, data.vote, data.speaker);\n        break;\n        \n      case 'PING':\n        const session = this.sessions.get(playerId);\n        if (session) {\n          try {\n            session.socket.send(JSON.stringify({ type: 'PONG', timestamp: Date.now() }));\n          } catch (error) {\n            console.error('Failed to send PONG to player:', playerId, error);\n          }\n        }\n        break;\n        \n      default:\n        console.warn('Unknown message type:', data.type, 'from player:', playerId);\n    }\n  }\n\n  // Handle buzzword claims with real-time verification\n  async handleBuzzwordClaim(playerId, buzzword, squareIndex) {\n    const player = this.players.get(playerId);\n    if (!player) return;\n    \n    // Check if player has too many pending verifications\n    const playerPendingCount = Array.from(this.gameState.pendingVerifications.values())\n      .filter(v => v.claimedBy === playerId).length;\n      \n    if (playerPendingCount >= this.MAX_PENDING_VERIFICATIONS_PER_PLAYER) {\n      console.warn(`Player ${player.name} has too many pending verifications: ${playerPendingCount}`);\n      return;\n    }\n    \n    // Validate that the square exists and isn't already marked\n    if (player.markedSquares[squareIndex] === true) {\n      console.warn(`Player ${player.name} tried to claim already marked square ${squareIndex}`);\n      return;\n    }\n    \n    // Validate that the buzzword matches the player's board\n    if (player.board[squareIndex] !== buzzword) {\n      console.warn(`Buzzword mismatch: ${buzzword} vs ${player.board[squareIndex]} for player ${player.name}`);\n      return;\n    }\n    \n    // Skip verification for FREE SPACE\n    if (buzzword === 'FREE SPACE') {\n      player.markedSquares[squareIndex] = true;\n      player.currentScore += 5; // Small bonus for free space\n      \n      this.broadcast({\n        type: 'CLAIM_APPROVED',\n        claimerName: player.name,\n        buzzword: 'FREE SPACE',\n        points: 5\n      });\n      \n      this.checkForBingo(playerId);\n      return;\n    }\n    \n    const verificationId = generatePlayerId();\n    \n    // Create verification request\n    const verification = {\n      id: verificationId,\n      claimedBy: playerId,\n      claimerName: player.name,\n      buzzword,\n      squareIndex,\n      votes: new Map(),\n      speakerVotes: new Map(),\n      timestamp: Date.now(),\n      requiredVotes: Math.max(1, Math.floor(this.sessions.size / 2)) // Majority needed\n    };\n    \n    this.gameState.pendingVerifications.set(verificationId, verification);\n    \n    // Ask all OTHER players to verify WHO said this buzzword\n    this.broadcast({\n      type: 'VERIFY_BUZZWORD',\n      verificationId,\n      claimerName: player.name,\n      buzzword,\n      question: `Who said \"${buzzword}\"?`,\n      options: [\n        'Manager/Boss',\n        'Client', \n        player.name, // The claimer (self-claim detection)\n        'Other teammate',\n        'Someone else'\n      ]\n    }, playerId); // Exclude the claiming player from voting\n    \n    // Auto-reject after 30 seconds if not enough votes\n    const timeoutId = setTimeout(() => {\n      this.resolveVerification(verificationId, true); // Mark as timeout\n    }, 30000);\n    \n    // Store timeout ID for cleanup\n    verification.timeoutId = timeoutId;\n  }\n\n  // Handle verification votes with anti-cheat detection\n  async handleVerificationVote(playerId, verificationId, vote, speaker) {\n    const verification = this.gameState.pendingVerifications.get(verificationId);\n    if (!verification) return;\n    \n    // Record vote\n    verification.votes.set(playerId, vote);\n    verification.speakerVotes.set(playerId, speaker);\n    \n    // Check if we have enough votes to resolve\n    if (verification.votes.size >= verification.requiredVotes) {\n      this.resolveVerification(verificationId, false); // Not a timeout\n    }\n  }\n\n  // Resolve verification with anti-cheat logic (atomic resolution)\n  resolveVerification(verificationId, isTimeout = false) {\n    const verification = this.gameState.pendingVerifications.get(verificationId);\n    if (!verification || verification.resolved) return; // Already resolved - prevent race condition\n    \n    // Mark as resolved immediately to prevent double resolution\n    verification.resolved = true;\n    \n    // Clear timeout to prevent phantom timeouts\n    if (verification.timeoutId) {\n      clearTimeout(verification.timeoutId);\n      verification.timeoutId = null;\n    }\n    \n    const claimingPlayer = this.players.get(verification.claimedBy);\n    if (!claimingPlayer) {\n      this.gameState.pendingVerifications.delete(verificationId);\n      return;\n    }\n    \n    // Handle timeout case - auto-reject for insufficient participation\n    if (isTimeout) {\n      this.broadcast({\n        type: 'CLAIM_REJECTED',\n        reason: 'TIMEOUT',\n        claimerName: claimingPlayer.name,\n        buzzword: verification.buzzword,\n        message: `Verification timeout - not enough players voted on \"${verification.buzzword}\"`\n      });\n      \n      this.gameState.pendingVerifications.delete(verificationId);\n      return;\n    }\n    \n    // Count votes\n    const approvals = Array.from(verification.votes.values()).filter(v => v === 'approve').length;\n    const rejections = verification.votes.size - approvals;\n    \n    // Count who people think said it (anti-cheat)\n    const speakerCounts = {};\n    verification.speakerVotes.forEach((speaker) => {\n      speakerCounts[speaker] = (speakerCounts[speaker] || 0) + 1;\n    });\n    \n    const topSpeaker = Object.keys(speakerCounts).reduce((a, b) => \n      speakerCounts[a] > speakerCounts[b] ? a : b, ''\n    );\n    \n    // ANTI-CHEAT: Reject if majority says the claimer said it themselves\n    if (topSpeaker === claimingPlayer.name && speakerCounts[topSpeaker] > verification.votes.size / 2) {\n      claimingPlayer.currentScore = Math.max(0, claimingPlayer.currentScore - 50);\n      \n      this.broadcast({\n        type: 'CLAIM_REJECTED',\n        reason: 'SELF_CLAIM',\n        claimerName: claimingPlayer.name,\n        buzzword: verification.buzzword,\n        message: `${claimingPlayer.name} can't mark buzzwords they said themselves! (-50 points)`,\n        penalty: -50\n      });\n      \n      this.gameState.pendingVerifications.delete(verificationId);\n      return;\n    }\n    \n    // Standard approval/rejection based on votes\n    if (approvals > rejections) {\n      // APPROVED - mark the square\n      claimingPlayer.markedSquares[verification.squareIndex] = true;\n      claimingPlayer.currentScore += 10; // 10 points per verified square\n      \n      this.broadcast({\n        type: 'CLAIM_APPROVED', \n        claimerName: claimingPlayer.name,\n        buzzword: verification.buzzword,\n        points: 10\n      });\n      \n      // Check for bingo\n      this.checkForBingo(verification.claimedBy);\n      \n    } else {\n      // REJECTED\n      this.broadcast({\n        type: 'CLAIM_REJECTED',\n        reason: 'INSUFFICIENT_VOTES',\n        claimerName: claimingPlayer.name,\n        buzzword: verification.buzzword,\n        message: `Not enough people heard \"${verification.buzzword}\"`\n      });\n    }\n    \n    this.gameState.pendingVerifications.delete(verificationId);\n  }\n\n  // Check if player achieved bingo (5 in a row)\n  checkForBingo(playerId) {\n    const player = this.players.get(playerId);\n    if (!player || player.bingoAchievedThisRound) return;\n    \n    const marked = player.markedSquares;\n    \n    // Check all possible bingo patterns\n    const patterns = [\n      // Rows\n      [0,1,2,3,4], [5,6,7,8,9], [10,11,12,13,14], [15,16,17,18,19], [20,21,22,23,24],\n      // Columns  \n      [0,5,10,15,20], [1,6,11,16,21], [2,7,12,17,22], [3,8,13,18,23], [4,9,14,19,24],\n      // Diagonals\n      [0,6,12,18,24], [4,8,12,16,20]\n    ];\n    \n    for (const pattern of patterns) {\n      if (pattern.every(i => marked[i] || i === 12)) { // 12 is free space\n        this.handleBingoAchieved(playerId, pattern);\n        return;\n      }\n    }\n  }\n\n  // Handle bingo win - award points and trigger new round for everyone\n  async handleBingoAchieved(playerId, winningPattern) {\n    const player = this.players.get(playerId);\n    if (!player) return;\n    \n    player.bingoAchievedThisRound = true;\n    player.currentScore += 500; // Bonus points for bingo\n    player.totalScore += player.currentScore;\n    \n    this.broadcast({\n      type: 'BINGO_ACHIEVED',\n      winner: player.name,\n      score: player.currentScore,\n      pattern: winningPattern,\n      message: `\uD83C\uDF89 ${player.name} got BINGO! New cards in 3 seconds...`\n    });\n    \n    // Auto-generate new boards for EVERYONE after celebration\n    setTimeout(() => {\n      this.regenerateAllBoards();\n    }, 3000);\n  }\n\n  // Generate new unique boards for all players (auto-reshuffle)\n  regenerateAllBoards() {\n    this.gameState.roundNumber++;\n    \n    this.players.forEach((player) => {\n      // Save current score to total\n      player.totalScore += player.currentScore;\n      \n      // Generate completely new unique board\n      player.board = this.generateUniqueBoard();\n      player.markedSquares = new Array(25).fill(false);\n      player.currentScore = 0;\n      player.bingoAchievedThisRound = false;\n    });\n    \n    // Send new boards to all players\n    this.sessions.forEach((session, playerId) => {\n      const player = this.players.get(playerId);\n      session.socket.send(JSON.stringify({\n        type: 'NEW_BOARD',\n        board: player.board, // Each player gets their unique new board\n        totalScore: player.totalScore,\n        currentScore: 0,\n        roundNumber: this.gameState.roundNumber\n      }));\n    });\n    \n    // Broadcast new round started\n    this.broadcast({\n      type: 'NEW_ROUND',\n      roundNumber: this.gameState.roundNumber,\n      leaderboard: this.getLeaderboard()\n    });\n  }\n\n  // Get current leaderboard\n  getLeaderboard() {\n    return Array.from(this.players.values())\n      .sort((a, b) => b.totalScore - a.totalScore)\n      .map(p => ({\n        name: p.name,\n        totalScore: p.totalScore,\n        currentScore: p.currentScore\n      }));\n  }\n\n  // Rate limiting check for players\n  checkRateLimit(playerId) {\n    const now = Date.now();\n    const windowStart = now - 60000; // 1 minute window\n    \n    let playerLimits = this.playerRateLimits.get(playerId);\n    if (!playerLimits) {\n      playerLimits = [];\n      this.playerRateLimits.set(playerId, playerLimits);\n    }\n    \n    // Remove old timestamps outside the window\n    while (playerLimits.length > 0 && playerLimits[0] < windowStart) {\n      playerLimits.shift();\n    }\n    \n    // Check if player has exceeded rate limit\n    if (playerLimits.length >= this.MAX_MESSAGES_PER_MINUTE) {\n      return false;\n    }\n    \n    // Add current timestamp\n    playerLimits.push(now);\n    return true;\n  }\n  \n  // Clean up player verifications when player disconnects\n  cleanupPlayerVerifications(playerId) {\n    const toRemove = [];\n    this.gameState.pendingVerifications.forEach((verification, verificationId) => {\n      if (verification.claimedBy === playerId) {\n        // Clear timeout if exists\n        if (verification.timeoutId) {\n          clearTimeout(verification.timeoutId);\n        }\n        toRemove.push(verificationId);\n      }\n    });\n    \n    // Remove the verifications\n    toRemove.forEach(verificationId => {\n      this.gameState.pendingVerifications.delete(verificationId);\n    });\n    \n    console.log(`Cleaned up ${toRemove.length} pending verifications for player ${playerId}`);\n  }\n\n  // Broadcast message to all connected players (with optional exclusion)\n  broadcast(message, excludePlayerId = null) {\n    const failedConnections = [];\n    \n    this.sessions.forEach((session, playerId) => {\n      if (playerId !== excludePlayerId) {\n        try {\n          session.socket.send(JSON.stringify(message));\n        } catch (error) {\n          console.error('Broadcast error to player', playerId, error);\n          \n          // Mark connection for cleanup if it's clearly broken\n          if (error.name === 'TypeError' || error.message.includes('closed')) {\n            failedConnections.push(playerId);\n          }\n        }\n      }\n    });\n    \n    // Clean up failed connections\n    failedConnections.forEach(playerId => {\n      console.log(`Removing failed connection for player: ${playerId}`);\n      this.sessions.delete(playerId);\n      \n      // Clean up all player resources\n      this.cleanupPlayerVerifications(playerId);\n      this.playerRateLimits.delete(playerId);\n      \n      // Also remove from players if this was their only connection\n      const player = this.players.get(playerId);\n      if (player) {\n        this.players.delete(playerId);\n        \n        // Notify remaining players\n        this.broadcast({\n          type: 'PLAYER_LEFT',\n          playerId,\n          playerName: player.name,\n          playerCount: this.players.size\n        });\n      }\n    });\n  }\n}\n\n// Generate cryptographically secure player ID\nfunction generatePlayerId() {\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => \n    byte.toString(16).padStart(2, '0')\n  ).join('');\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"F:\\\\CC\\\\Projects\\\\engineer-memes\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Ryan\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Ryan\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"F:\\\\CC\\\\Projects\\\\engineer-memes\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"F:\\\\CC\\\\Projects\\\\engineer-memes\\\\.wrangler\\\\tmp\\\\bundle-P5vEhy\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Ryan\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"F:\\\\CC\\\\Projects\\\\engineer-memes\\\\.wrangler\\\\tmp\\\\bundle-P5vEhy\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"F:\\\\CC\\\\Projects\\\\engineer-memes\\\\.wrangler\\\\tmp\\\\bundle-P5vEhy\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
